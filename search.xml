<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[OpenGL ES 2.0基础教程（2）：GLSurfaceView]]></title>
      <url>%2F2017%2F05%2F10%2FGLES20-02%2F</url>
      <content type="text"><![CDATA[为了能在Android应用中使用 OpenGL ES 绘画，必须创建一个View作为容器。而最直接的方式就是从 GLSurfaceView 和 GLSurfaceView.Renderer 分别派生一个类。 GLSurfaceView 作为OpenGL绘制所在的容器，而实际的绘图动作都是在 GLSurfaceView.Renderer 里面发生的。 GLSurfaceViewGLSurfaceView 是一个视图，继承自 SurfaceView，它内嵌的 Surface 专门负责 OpenGL ES 渲染。 继承关系&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Object&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;└ android.view.View&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;└ android.view.SurfaceView&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;└ android.opengl.GLSurfaceView GLSurfaceView特性GLSurfaceView 提供了下列特性 管理一个Surface，这个surface就是一块特殊的内存，能直接排版到Android的视图View上。 管理一个EGL display，它能让OpenGL把内容渲染到上述的Surface上。 接受用户提供的渲染对象，进行实际绘制。 在独立线程中进行渲染，和UI线程分离。 支持按需渲染(on-demand)和连续渲染(continuous)。 一些可选工具，如调试。 创建GLSurfaceViewGLSurfaceView 作为 OpenGL ES 绘制所在的容器，而实际的绘图动作都是在 GLSurfaceView.Renderer 里面发生的。为了能在 Android 应用中使用 OpenGL ES 绘画，必须创建一个 View 作为容器。而最直接的方式就是从 GLSurfaceView 和 GLSurfaceView.Renderer 分别派生一个类。 编写 OpenGL ES 应用的起点就是是从类 GLSurfaceView 开始的，通常会对 GLSurfaceView 进行派生来实现一些特定功能，例如响应触摸事件等。如果不需要功能扩展， GLSurfaceView 也可以直接用来使用。 1234567class MyGLSurfaceView extends GLSurfaceView &#123; public MyGLSurfaceView(Context context) &#123; super(context); ... &#125;&#125; 注册渲染器GLSurfaceView 的渲染被委托给 Renderer（渲染器）在独立的渲染线程里进行，可以通过 setRenderer(Renderer) 方法完成渲染器的注册。 1void setRenderer(GLSurfaceView.Renderer renderer) 给 GLSurfaceView 注册唯一的渲染器，并启动渲染器渲染线程开始进行渲染，该方法应该在 GLSurfaceView 的生命周期中被调用一次，并且只能调用一次。 下面 GLSurfaceView 方法只能在 setRenderer() 之前调用： 123setEGLConfigChooser(boolean)setEGLConfigChooser(EGLConfigChooser)setEGLConfigChooser(int, int, int, int, int, int) 下面 GLSurfaceView 方法只能在 setRenderer() 之后调用： 123456getRenderMode()onPause()onResume()queueEvent(Runnable)requestRender()setRenderMode(int) EGL配置EGL是 OpenGL ES 和底层的本地窗口系统之间的接口，Android设备支持多种EGL配置，可以使用不同数目的通道(channel)，也可以指定每个通道具有不同的位数(bits)。因此，GLSurfaceView在渲染器工作之前就应该指定EGL的配置。 默认情况下， GLSurfaceView 使用默认配置选择器为像素格式为RGB_656，16位的深度缓存(depth buffer)，默认不开启遮罩缓存(stencil buffer)。如果希望使用不同的EGL配置，例如不需要深度缓冲区，则可以通过调用 setEGLConfigChooser() 方法来指定配置选择器来覆盖默认配置。 1public void setEGLConfigChooser(GLSurfaceView.EGLConfigChooser configChooser) 使用自定义的配置选择器。 1public void setEGLConfigChooser(boolean needDepth) 使用默认配置选择器，选择是否使用深度缓存区。 123456public void setEGLConfigChooser(int redSize, int greenSize, int blueSize, int alphaSize, int depthSize, int stencilSize) 使用配置选择器，该配置选择器将选择至少具有指定大小的配置，并尽可能接近指定的组件大小。 如果调用setEGLConfigChooser()方法对，则必须在调用setRenderer(Renderer)之前调用该方法。 调试行为可以调用调试方法 setDebugFlags(int) 或 setGLWrapper(GLSurfaceView.GLWrapper) 来选择性的修改 GLSurfaceView 一些行为。这些方法可以在 setRenderer() 方法之前或之后调用，通常会在调用 setRenderer() 之前调用，以便它们能立即生效。 1public void setGLWrapper(GLSurfaceView.GLWrapper glWrapper) 设置glWrapper。如果glWrapper不为null，则在每次创建 surface 时调用其GLSurfaceView.GLWrapper.wrap(GL)方法。GLWrapper可用来包装GL对象传递给渲染器。包装GL对象能够检查和修改渲染器创建的GL调用的行为。 包装主要用于调试。 glWrapper默认值为null。 1public void setDebugFlags(int debugFlags) 将调试标志设置为新值。该值由一个或多个 DEBUGCHECK* 标志常量构造。每当创建surface时，调试标志都会生效。调试标志默认值为零。例如 setDebugFlags(DEBUG_CHECK_GL_ERROR | DEBUG_LOG_GL_CALLS)。 调试标志常量： DEBUG_CHECK_GL_ERROR GL日志通过 “GLSurfaceView” 标签输出 verbose 级别的系统日志。 DEBUG_LOG_GL_CALLS 每次GL调用后都检查 glError()，如果glError()指示发生错误，则抛出异常。 1public int getDebugFlags() 获取当前调试标志的值。 渲染模式当渲染器设置之后，可以使用 setRenderMode(int) 指定渲染模式是按需渲染(on demand)还是连续渲染(continuous)。默认是连续渲染。 1public void setRenderMode(int renderMode) RENDERMODE_CONTINUOUSLY 连续渲染，默认渲染模式，连续调用渲染器进行渲染。 RENDERMODE_WHEN_DIRTY 按需渲染，渲染器仅在创建surface或调用requestRender()时进行渲染，此模式在视图不需要更新时允许GPU和CPU空闲，从而提高电池寿命和整体系统性能。 本方法只能在setRenderer(Renderer)之后进行调用。 Activity生命周期Activity窗口暂停(pause)或恢复(resume)时都必须通知 GLSurfaceView，GLSurfaceView客户端需要当Activity暂停时调用GLSurfaceView.onPause()方法，当Activity恢复时调用GLSurfaceView.onResume()方法，通过与Activity的生命周期绑定来实现控制暂停和恢复渲染线程。 事件处理要处理事件，通常都是继承GLSurfaceView类并重载它的事件方法。但是由于GLSurfaceView的渲染是在渲染器的独立渲染线程里，需要使用Java的跨线程通信机制跟渲染器通信，另外一个比较简单的方法就是调用queueEvent(Runnable)方法，例如： 123456789101112131415161718192021class MyGLSurfaceView extends GLSurfaceView &#123; private MyRenderer mMyRenderer; public void start() &#123; mMyRenderer = ...; setRenderer(mMyRenderer); &#125; public boolean onKeyDown(int keyCode, KeyEvent event) &#123; if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) &#123; queueEvent(new Runnable() &#123; // 此方法将在渲染线程中调用: public void run() &#123; mMyRenderer.handleDpadCenter(); &#125;&#125;); return true; &#125; return super.onKeyDown(keyCode, event); &#125; &#125; 1public void queueEvent(Runnable r) 运行在渲染线程的队列，可用于与渲染器的渲染线程进行通信。在设置渲染器之前不能使用。 设置OpenGL ES使用版本当使用 OpenGLES 2.0 时，需要在 GLSurfaceView 的构造器中调用另外setEGLContextClientVersion()方法用来说明将要使用2.0版的API。 1setEGLContextClientVersion(2); GLSurfaceView.RendererGLSurfaceView.Renderer 是一个通用的渲染器接口类，GLSurfaceView 的内部类，由OpenGL调用来完成帧的渲染。通常会自己实现此接口的类，然后调用GLSurfaceView.setRenderer(Renderer)来使GLSurfaceView注册渲染器。 实现自定义渲染器需要实现下面三个方法： onSurfaceCreated(GL10 gl, EGLConfig config) onSurfaceChanged(GL10 gl, int width, int height) onDrawFrame(GL10 gl) onSurfaceChanged()1void onSurfaceChanged(GL10 gl, int width, int height) 当surface创建或重新创建时调用。 该方法当渲染线程启动和 EGL context 丢失时调用。当Android设备在睡眠后唤醒时，context 通常会丢失。 由于在渲染开始时以及每次 EGL context 丢失时都调用此方法，所以该方法是放置的创建相关资源的便利位置，当 EGL context 丢失时资源都需要重新创建，例如可以在此加载纹理资源。 注意，当 EGL context 丢失时，与该context相关联的所有OpenGL资源将被自动删除，不需要手动调用相应的 “glDelete” 方法，如 glDeleteTextures() 来手动删除这些丢失的资源。 onSurfaceChanged()1void onSurfaceChanged(GL10 gl, int width, int height) 当surface改变尺寸时调用，例如横纵屏切换。 onDrawFrame()1void onDrawFrame(GL10 gl) 当需要进行绘制时调用此方法，此方法中进行实际的绘制操作。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[OpenGL ES 2.0基础教程（1）：渲染管线]]></title>
      <url>%2F2017%2F04%2F19%2FGLES20-01%2F</url>
      <content type="text"><![CDATA[大部分图形系统都可以比作工厂中的装配线(Assemble line)或者称为管线(Pipeline)。前一道的输出作为下道工序的输入。主CPU发出一个绘图指令，然后可能由硬件部件完成坐标变换，裁剪，添加颜色或是材质，最后在屏幕上显示出来。 可编程渲染管线在 OpenGL ES 1.x 版本中支持固定管线，而 OpenGL ES 2.0 版本不再支持固定管线，只支持可编程管线，比起 OpenGL ES 1.x 中的固定管线要复杂和灵活很多。可编程管线就是说管线中某些操作可以动态编程实现而不必固定写死在代码中。那可编程管线有什么好处呢？主要是方便动态修改渲染过程，而无需重写编译代码，当然也和很多脚本语言一样，调试起来不太方便。 下图为 OpenGL ES 2.0 渲染管线，阴影部分为可编程着色器。可动态编程实现这一功能通常都是通过脚本实现的，在 OpenGL ES 中也一样，编写着色器脚本的是由着色语言 (Shader Language) 提供的。 顶点数据顶点缓冲区对象（Vertex Buffer Object） 简称 VBO，它是GPU里面的一块缓冲区，当我们需要传递数据的时候，可以先向GPU申请一块内存，然后往里面填充数据。最后，再通过调用glVertexAttribPointer把数据传递给Vertex Shader。 顶点数组对象（Vertex Arrays Object） 简称 VAO，它的作用主要是记录当前有哪些VBO，每个VBO里面绑定的是什么数据，还有每一个 vertex attribute 绑定的是哪一个VBO。 VBO/VAO 是渲染管线的顶点数据来源，是CPU提供给GPU的，包括了顶点的位置、颜色、纹理坐标（用于纹理贴图）等顶点信息。 顶点着色器顶点着色器 （Vertex Shader）是处理 VBO/VAO 提供的顶点信息的程序，VBO/VAO提供的每个顶点都执行一遍顶点着色器程序。 通过可编程的方式实现对顶点的操作，如进行基于矩阵变换位置，进行光照计算来生成每个顶点的颜色，生成或者变换纹理坐标，另外因为顶点着色器是由应用程序指定的，所以你可以用来进行任意自定义的顶点变换。下图展示为顶点着色器的输入/输出情况： 顶点着色器的输入 Attributes：使用顶点数组封装每个顶点的数据，一般用于每个顶点都各不相同的变量，如顶点位置、颜色等。 Uniforms：顶点着色器使用的常量数据，不能被着色器修改，一般用于对同一组顶点组成的单个3D物体中所有顶点都相同的变量，如当前光源的位置。 Samplers：这个是可选的，一种特殊的 Uniforms ，表示顶点着色器使用的纹理。 顶点着色器的输出 Varying：顶点着色器的输出变量，作为片元着色器（Fragment Shader）的输入。在图元光栅化阶段，这些 Varying 值为每个生成的片元进行计算，并将结果作为片元着色器的输入数据。从分配给每个顶点的原始 Varying 值来为每个片元生成一个 Varying 值的机制叫做插值。 顶点着色器的特殊输出变量 gl_Postion：以裁剪坐标的方式输出“顶点位置”，且是一个highp变量。 gl_FrontFacing：以像素为单位输出“点的大小”，其值被限制在OpenGL ES 2.0可实现的范围内，且是一个mediump变量。 gl_PointSize：不直接由Vertex Shader写，是一个boolean变量。 图元装配 图元装配（Primitive Assembly)，经过着色器处理之后的顶点在图元装配阶段被装配为基本图元，图元是一个能用OpenGL ES绘图命令绘制的几何体，绘图命令指定了一组顶点属性，描述了图元的几何形状和图元类型，OpenGL ES 支持三种基本图元：点，线和三角形，它们是可被 OpenGL ES 渲染的。 在图元装配阶段，这些顶点着色器处理过的顶点被组装到一个个独立的几何图元中，对于每个图元都必须确定它是否位于视椎体内（三维空间显示在屏幕上的可见区域），如果图元部分在视椎体中，需要进行裁剪，如果图元全部在视椎体外，则直接丢弃图元。裁剪之后，顶点位置转换成了屏幕坐标。背面剔除操作也会执行，它根据图元是正面还是背面，如果是背面则丢弃该图元。 裁剪（Clip）：保留完全在视锥体中的图元，丢弃完全不在视锥体中的图元，对一半在一半不在的图元进行裁剪。 剔除（Cull）：这个过程可编码来决定是剔除正面、背面还是全部剔除。 光栅化 光栅化（Rasterization），在光栅化阶段基本图元（点、线、三角形）被转换为二维的片元(Fragment)，Fragment 表示可以被渲染到屏幕上的像素，它包含位置，颜色，纹理坐标等信息，这些值是由图元的顶点信息进行插值计算得到的。这些片元接着被送到片元着色器中处理。这是从顶点数据到可渲染在显示设备上的像素的质变过程。 用于从分配给每个图元顶点的顶点着色器输出生成每个片段值的机制称作插值（Interpolation）。这句不是人话的话解释了一个问题，就是从CPU提供的分散的顶点信息是如何变成屏幕上密集的像素的，图元装配后顶点可以理解成变为图形，光栅化时可以根据图形的形状，插值出那个图形区域的像素（纹理坐标v_texCoord、颜色等信息）。注意，此时的像素并不是屏幕上的像素，是不带有颜色的。接下来的片元着色器完成上色的工作。总之，光栅化阶段把图元转换成片元集合，之后会提交给片元着色器处理，这些片元集合表示可以被绘制到屏幕的像素。 片元着色器片元着色器（Fragment Shader），片元着色器通过可编程的方式实现对片元的操作，光栅化阶段生成每个片元都需要执行这个着色器程序，生成一个或多个（多重渲染）颜色值作为输出。下图展示为片元着色器的输入/输出情况： 片元着色器的输入 Varying：顶点着色器输出的varying变量经过光栅化插值计算后产生的作用于每个片元的值。 Uniforms：片元着色器使用的常量数据。 Samplers：一种特殊的uniforms，表示片元着色器使用的纹理。 片元着色器的输出片元着色器可以丢弃片元或者为片元生成一个颜色值，保存到内置变量gl_FragColor。 逐片元操作逐片元操作（Per-Fragment Operation），一个光栅化阶段产生的具有屏幕坐标(Xw, Yw)的片元，只能修改 Framebuffer (帧缓存)中位置在(Xw, Yw)的像素，在这一阶段对每一个片元进行一系列测试与处理，从而决定最终用于渲染的像素。这一系列处理过程如下： 像素所有权测试（Pixel Ownership Test）：决定 Framebuffer 中某一个(Xw, Yw)位置的像素是否属于当前Opengl ES的Context。比如：如果一个OpenGL ES帧缓冲窗口被其他窗口遮住了，窗口系统将决定被遮住的像素不属于当前OpenGL ES的Context，因此也就不会被显示。 裁剪测试（Scissor Test）：裁剪测试决定位置为(Xw, Yw)的片元是否位于裁剪矩形内，如果不在，则被丢弃。 模板测试（Stencil Test）：根据传入片元的模板，决定是否丢弃片元。 深度测试（Depth Test）：根据传入片元的深度值，决定是否丢弃片元。 混合（Blending）：将新产生的片元颜色值和Framebuffer中某个(Xw, Yw)位置存储的颜色值进行混合。 抖动（Dithering）：抖动可以用来最大限度的减少使用有限精度存储颜色值到Framebuffer的工件。 逐片元操作之后，片元要么被丢弃，要么一个片元的颜色、深度或者模板值被写入到Framebuffer的(Xw, Yw)位置，不过是否真的会写入还得依赖于Write Masks启用与否。Write Masks能更好的控制颜色、深度和模板值写入到合适的缓冲区。例如：颜色缓冲区中的Write Masks可以被设置成没有红色值写入到颜色缓冲区。 帧缓存帧缓存（Framebuffer），这是OpenGL ES 2.0渲染管线的最后一个阶段，Framebuffer 中存储这可以用于渲染到屏幕或纹理中的像素值，Opengl ES 2.0提供从Framebuffer中获取像素的接口，但不能读取其它值（如深度值，模版值等）。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[OpenGL ES 2.0基础教程（0）：OpenGL ES 简介]]></title>
      <url>%2F2017%2F04%2F17%2FGLES20-00%2F</url>
      <content type="text"><![CDATA[OpenGL ES (OpenGL for Embedded Systems) 是针对手机、PDA和游戏主机等嵌入式设备而设计发展的 3D 绘图接口。OpenGL ES 是一个叫做 Khronos 组织创造的一系列接口中的一个。Khronos是一个图形软硬件行业协会，该协会主要关注图形和多媒体方面的开放标准。 由来OpenGL (Open Graphics Library) 是一个跨编程语言、跨平台的专业底层图形接口，其具有功能强大、调用方便等特点，因此在 2D/3D 图形领域中被广泛使用。因为受制于嵌入式设备的硬件基础，因此 OpenGL 并不适用于嵌入式设备，所以 Khronos 团队对 OpenGL 进行了适当修改以适用于嵌入式设备，而 OpenGL ES 就是在 OpenGL 基础上进行裁剪定制而来的针对于嵌入式设备的图形接口，所以说 OpenGL ES 就是 OpenGL 的子集。 创建 OpenGL ES 的初衷是建立一个适合嵌入式设备驱动程序，为此 Khronos 团队删除了一些 OpenGL 中的冗余设计，对于同一种操作有多种适用方法的，只留下其主要的方法，多余的方法均被删除。例如绘制一个几何体，OpenGL 中可以使用立即模式、显示列表、顶点矩阵三种方法，但是在 OpenGL ES 中只能使用顶点矩阵，显示列表和立即模式被移除。 发展OpenGL ES 1.0 和 OpenGL ES 1.1 为固定渲染管线，分别从 OpenGL1.3 和 OpenGL1.5 发展而来。OpenGL ES 2.0 为可编程渲染管线，发展自 OpenGL 2.0。OpenGL ES 3.0 发展自 OpenGL 3.0。 因为 OpenGL ES 均是发展自 OpenGL，也就意味着 OpenGL 是 OpenGL ES 的基础，决定着未来 OenGL ES 的版本。 向后兼容OpenGL ES 2.0 不支持向后兼容 OpenGL ES 1.x，因为它不支持固定功能的管线。OpenGL ES 2.0 中使用可编程顶点着色器取代 OpenGL ES 1.x 固定功能的顶点着色器。 OpenGL ES 2.0 工作组决定不提供向后兼容能力主要基于如下考虑： 提供对固定功能管线的支持也就是暗示 API 将支持多种的方法执行一个特性，这违背了设计的初衷，可编程管线即使提供对固定管线的支持，也不会获得更多的注意。 对硬件供应商来说，那将有更多的工作要做，而可编程管线能提供更多的灵活性。 即支持固定管线，又支持可编程管线意味着设备需要更多的内存，而如果分离固定管线和可编程管线，厂商就不需要更多的驱动支持。 而且，不同于 OpenGL ES 1.x，OpenGL ES 2.0 中没有配置文件或扩展命令。 Android系统支持OpenGL ES 1.x 支持 初代 AndroidOpenGL ES 2.0 支持 Android 2.2 以后的平台。OpenGL ES 3.0 支持 Android 4.3 以后的平台。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Windows下使用Bash]]></title>
      <url>%2F2017%2F04%2F12%2FBashOnWindows%2F</url>
      <content type="text"><![CDATA[在 Windows10 14316 版本中更新了 Bash on Ubuntu on Windows 功能，允许在 Windows 上运行 Ubuntu Bash，虽然与原生的Bash相比还有些缺陷，不过大部分功能还是能够正常使用的。 安装 BashOnWindows检查Windows10版本想要使用 BashOnWindows 需要Windows10版本为 14316 以上版本，可以通过下面三种方法查看当前Windows10版本。 打开cmd命令行，最上面会显示当前版本。 使用cmd命令，输入 ver 可以查看当前版本。 在运行中输入 msinfo32，可在系统信息中查看当前版本。 打开开发人员模式在 windwos 的 设置 中打开 更新和安全 ，然后在左侧列表中选择 针对开发人员 ,右侧选择 开发人员模式。如果提示失败则检查 Windows Update 服务是否已经打开。 下载BashOnWindows在 控制面板 中打开 程序 ，然后在 程序和功能 中打开 启用或关闭Windows功能 ，接着在弹出的窗口中勾选 适用于Linux的Windows子系统(Beta) ，系统会下载更新并提示重启机器。 系统重启完成后，进入cmd命令行，输入 bash 后会提示你是否继续，选择 y ，系统会安装 Ubuntu Bash ，等待安装完成后会提示创建账号，之后就进入熟悉的Bash了。可能会遇到安装失败，因为下载节点在国外，这个时候打开代理便可以进行下载。 之后就可以在 cmd 或者 PowerShell 中输入 bash 进入 Bash 了。 更换软件更新源把下面的阿里源内容粘贴到 /etc/apt/sources.list ，之后运行 sudo apt-get update 完成更新后就可以通过 apt-get 进行常用软件的安装了。 12345678910deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse Cmder启动Bash如果经常使用Bash的话，使用cmd 的配色会感觉过于朴实，接下来通过 Cmder 来对 Bash 进行美化。 Cmder下载首先登录 Cmder官网 进行下载，下载时会有 mini 与 full 两个版版，其差别在于有没有内建git-for-windows工具，选择full版本进行下载。 下载完成后会得到一个压缩包，解压完成即可使用。 右键添加在当前位置打开想要快捷方便的打开 Cmder ，一般会将其添加到鼠标右键菜单中。在 Cmder.exe 所在文件夹打开带管理员权限的 cmd 命令行，输入如下指令。 1Cmder.exe /REGISTER ALL 之后就可以在任意位置通过鼠标右键打开Cmder了。 使用Cmder打开Bash安装 Cmder 的目的就是希望通过它来代替 cmd 打开 Bash ，接下来就是设置如何打开 Bash 。 在 Cmder 中选择 Setting ，然后在 Startup -&gt; Tasks -&gt; {cmd::Cmder} 中输入如下启动方式，这样就可以通过鼠标右键菜单打开 Bash 了，并且是在当前文件夹打开，同时也避免了在 Vim 中方向键失灵的问题。 1cmd /k &quot;%ConEmuDir%\..\init.bat&quot; -new_console:p:n%USERPROFILE% &amp;bash 但是设置完如上启动方式之后，每次关闭时都会弹出提示框提示 Confirm closing console? ，只需要在 Setting -&gt; Main -&gt; Confirm -&gt; Close confirmations 中取消 When running process was detected 前面选中状态，就可以关闭提示框的弹出。 Zsh代替BashBash 虽然很不错，但是 Zsh 在自动补全方面的强大还是让我投入 Zsh 的怀抱，另外 Zsh 的主题用起来也很方便。 安装ZshZsh 安装起来简单，但是配置起来却十分麻烦，不过还好已经有了 oh-my-zsh ， 直接通过在 Bash 下输入下面指令安装 Zsh 及配置。 1sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; 或者 1sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot; 安装完成后就可以在 Bash 中输入 zsh 进入 Zsh。 Zsh主题oh-my-zsh 中有140多种主题供选择，可以去 oh-my-zsh主题 页面选择自己喜欢的主题。 选择好自己喜欢的主题后打开 ~/.zshrc ，修改 ZSH_THEME 为自己选择的主题名字即可。例如下面就是将主题设置为 ys 主题。 Bash默认启动Zsh每次运行 Cmder 现在已经默认启动 Bash 了，但是进入 Zsh 还要手动输入，接下来就是设置启动 Bash 时自动进入 Zsh。 在 ~/.bashrc 文件末尾添加如下代码，即可实现 Zsh 的自动进入了。 1bash -c zsh]]></content>
    </entry>

    
  
  
</search>
